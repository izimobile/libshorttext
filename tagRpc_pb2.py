# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: tagRpc.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='tagRpc.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x0ctagRpc.proto\"!\n\rTagRpcRequest\x12\x10\n\x08messages\x18\x01 \x03(\t\"[\n\x0bTagRpcReply\x12$\n\x07results\x18\x01 \x03(\x0b\x32\x13.TagRpcReply.Result\x1a&\n\x06Result\x12\x0f\n\x07relWord\x18\x01 \x01(\t\x12\x0b\n\x03tag\x18\x02 \x01(\t28\n\x06TagRpc\x12.\n\x0c\x43lassifyBulk\x12\x0e.TagRpcRequest\x1a\x0c.TagRpcReply\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_TAGRPCREQUEST = _descriptor.Descriptor(
  name='TagRpcRequest',
  full_name='TagRpcRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='messages', full_name='TagRpcRequest.messages', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=16,
  serialized_end=49,
)


_TAGRPCREPLY_RESULT = _descriptor.Descriptor(
  name='Result',
  full_name='TagRpcReply.Result',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='relWord', full_name='TagRpcReply.Result.relWord', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tag', full_name='TagRpcReply.Result.tag', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=104,
  serialized_end=142,
)

_TAGRPCREPLY = _descriptor.Descriptor(
  name='TagRpcReply',
  full_name='TagRpcReply',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='results', full_name='TagRpcReply.results', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_TAGRPCREPLY_RESULT, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=51,
  serialized_end=142,
)

_TAGRPCREPLY_RESULT.containing_type = _TAGRPCREPLY
_TAGRPCREPLY.fields_by_name['results'].message_type = _TAGRPCREPLY_RESULT
DESCRIPTOR.message_types_by_name['TagRpcRequest'] = _TAGRPCREQUEST
DESCRIPTOR.message_types_by_name['TagRpcReply'] = _TAGRPCREPLY

TagRpcRequest = _reflection.GeneratedProtocolMessageType('TagRpcRequest', (_message.Message,), dict(
  DESCRIPTOR = _TAGRPCREQUEST,
  __module__ = 'tagRpc_pb2'
  # @@protoc_insertion_point(class_scope:TagRpcRequest)
  ))
_sym_db.RegisterMessage(TagRpcRequest)

TagRpcReply = _reflection.GeneratedProtocolMessageType('TagRpcReply', (_message.Message,), dict(

  Result = _reflection.GeneratedProtocolMessageType('Result', (_message.Message,), dict(
    DESCRIPTOR = _TAGRPCREPLY_RESULT,
    __module__ = 'tagRpc_pb2'
    # @@protoc_insertion_point(class_scope:TagRpcReply.Result)
    ))
  ,
  DESCRIPTOR = _TAGRPCREPLY,
  __module__ = 'tagRpc_pb2'
  # @@protoc_insertion_point(class_scope:TagRpcReply)
  ))
_sym_db.RegisterMessage(TagRpcReply)
_sym_db.RegisterMessage(TagRpcReply.Result)


from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class BetaTagRpcServicer(object):
  def ClassifyBulk(self, request, context):
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaTagRpcStub(object):
  def ClassifyBulk(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    raise NotImplementedError()
  ClassifyBulk.future = None


def beta_create_TagRpc_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('TagRpc', 'ClassifyBulk'): TagRpcRequest.FromString,
  }
  response_serializers = {
    ('TagRpc', 'ClassifyBulk'): TagRpcReply.SerializeToString,
  }
  method_implementations = {
    ('TagRpc', 'ClassifyBulk'): face_utilities.unary_unary_inline(servicer.ClassifyBulk),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_TagRpc_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('TagRpc', 'ClassifyBulk'): TagRpcRequest.SerializeToString,
  }
  response_deserializers = {
    ('TagRpc', 'ClassifyBulk'): TagRpcReply.FromString,
  }
  cardinalities = {
    'ClassifyBulk': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'TagRpc', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
